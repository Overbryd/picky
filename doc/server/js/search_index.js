var search_data = {"index":{"searchIndex":["object","performant","array","picky","adapters","rack","base","liveparameters","search","application","backends","backend","file","basic","json","helpers","file","memory","basic","json","marshal","text","redis","basic","float","list","string","bundle","calculations","location","capistrano","all","caching","deploy","overrides","standard","statistics","categories","category","charactersubstituters","westeuropean","frontendadapters","rack","routetargetnilerror","generators","base","partial","infix","none","postfix","strategy","substring","substringgenerator","similarity","doublemetaphone","metaphone","none","phonetic","soundex","strategy","strategy","weights","logarithmic","strategy","helpers","measuring","index","indexers","base","parallel","serial","indexes","memory","redis","interfaces","liveparameters","couldnotupdateconfigurationerror","query","indexes","indexescheck","weights","rack","harakiri","results","search","sinatra","sources","base","csv","nofilegiven","couch","nodbgiven","db","delicious","mongo","nodbgiven","tokenizer","tokenizers","location","try","wrappers","bundle","calculation","delegator","exactpartial","indexeddelegator","indexingdelegator","location","wrapper","category","exactfirst","location","<<()","==()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","add()","add()","add()","add_partialized()","add_partialized()","add_tokenized()","add_tokenized_token()","after_indexing()","allocation_for()","allocations_ary_for()","allocations_for()","app_for()","at_least_version()","backend()","backup()","backup()","backup()","backup()","backup()","backup_directory()","backup_file_path_of()","boost()","bundle_for()","cache()","cache_ok?()","cache_ok?()","cache_ok?()","cache_small?()","cache_small?()","cache_small?()","calculate()","calculate()","call()","call()","cap()","cap?()","case_sensitive()","category()","check()","check_argument_in()","check_external_interface()","check_source_empty()","chunksize()","clear()","clear()","clear()","clear()","clear()","clear()","clear_categories()","clear_configuration()","clear_indexes()","clear_inverted()","clear_realtime_mapping()","clear_realtime_mapping()","clear_similarity()","clear_weights()","close_child()","combination_for()","connect_backend()","connect_backend()","count()","create_configuration()","create_configuration()","create_configuration()","create_directory()","create_inverted()","create_inverted()","create_inverted()","create_similarity()","create_similarity()","create_similarity()","create_weights()","create_weights()","create_weights()","define_after_indexing()","define_category()","define_indexing()","define_key_format()","define_ranged_category()","define_result_identifier()","define_source()","delete()","delete()","delete()","delete()","downcase?()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump_configuration()","dump_inverted()","dump_similarity()","dump_weights()","duration()","each_category()","each_partial()","each_partial()","each_partial()","each_subtoken()","empty()","empty()","empty()","empty()","empty()","empty()","empty_configuration()","empty_inverted()","empty_similarity()","empty_tokens()","empty_weights()","encoded()","encoded()","encoded()","encoded()","execute()","expand_combinations_from()","extended()","extension()","extension()","extension()","extension()","extension()","extension()","extract_configuration()","extract_host()","extract_lambda_or()","extract_qualifiers_from()","extract_source()","extract_source()","extracted()","from()","from()","from()","generate_caches_from_memory()","generate_for()","generate_for()","generate_from()","generate_from()","generate_from()","generate_from()","generate_from()","generate_from()","generate_intermediate_result_id()","generate_partial_from()","harakiri()","harakiri()","harakiri?()","harvest()","harvest()","harvest()","harvest()","harvest()","harvest_statement()","harvest_statement_with_offset()","hashify()","host()","identifier()","identifier()","identifier()","identifier()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ignore()","ignore_unassigned_tokens()","index()","index()","index()","index()","index()","index_default()","index_default=()","index_directory()","index_for_tests()","index_in_parallel()","index_name()","index_path()","indexer()","indexing()","indexing()","indexing()","initial()","initial()","initial()","initial()","inject_possible_for()","instance()","key_format()","key_format()","key_format()","kill_each_worker_except()","kill_worker()","load()","load()","load()","load()","load()","load()","load()","load()","load_configuration()","load_from_cache()","load_inverted()","load_similarity()","load_weights()","log_type()","map_categories()","maximum_tokens()","memory_efficient_intersect()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_with_patterns()","normalize_with_patterns?()","normalizes_words()","notify_finished()","open()","output()","parameters()","pid()","possible_categories()","possible_combinations()","possible_for()","prepare()","prepare!()","prepare_backup()","prepared_allocations_for()","prepared_index_file()","prepared_index_path()","preprocess()","pretokenize()","process()","process()","qualifiers()","query_default()","query_default=()","querying_removes_characters()","querying_removes_characters=()","querying_splits_text_on()","querying_splits_text_on=()","querying_stopwords()","querying_stopwords=()","raise_cache_missing()","raise_not_found()","raise_not_found()","raise_unless_cache_exists()","raise_unless_index_exists()","raise_unless_index_ok()","raise_unless_similarity_exists()","raise_unless_similarity_ok()","ranged_category()","redis_version()","redis_with_scripting?()","register()","register()","reindex()","reject()","rejects_token_if()","reload()","reload()","remove()","remove()","remove_illegals()","remove_non_single_stopwords()","remove_stopwords()","remove_worker()","removes_characters()","replace()","reset_rack_adapter()","respond_with()","restore()","restore()","restore()","restore()","result_identifier()","retrieve()","retrieve()","retrieve()","retrieve()","retrieve()","retrieve()","route()","saved()","saved?()","saved?()","saved?()","score_for()","search()","search_with()","searched()","searching()","searching()","searching()","similar()","similar_possible_for()","similar_tokens_for()","size()","size_of()","snapshot_table_name()","sort()","source()","source()","split()","splits_text_on()","start_master_process_thread()","stopwords()","substitute()","substitute_characters()","substitutes_characters_with()","take_snapshot()","take_snapshot()","timed()","to()","to_app()","to_app()","to_hash()","to_json()","to_routes()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_stats()","to_stdout()","tokenize()","tokenize()","tokenized()","tokenizer()","tokenizer()","tokenizer()","tokenizer()","tokens_for()","total()","try_updating_configuration_with()","use_exact_for_partial?()","use_exact_for_partial?()","warn_cache_small()","warn_if_index_small()","warn_if_similarity_small()","warn_no_source()","weight()","weight()","weight()","weight()","weight_for()","weight_for()","with_data_snapshot()","with_data_snapshot()","with_snapshot()","worker_pids()","wrap()","wrap()","wrap_each_of()","write_parent()","makefile"],"longSearchIndex":["object","performant","performant::array","picky","picky::adapters","picky::adapters::rack","picky::adapters::rack::base","picky::adapters::rack::liveparameters","picky::adapters::rack::search","picky::application","picky::backends","picky::backends::backend","picky::backends::file","picky::backends::file::basic","picky::backends::file::json","picky::backends::helpers","picky::backends::helpers::file","picky::backends::memory","picky::backends::memory::basic","picky::backends::memory::json","picky::backends::memory::marshal","picky::backends::memory::text","picky::backends::redis","picky::backends::redis::basic","picky::backends::redis::float","picky::backends::redis::list","picky::backends::redis::string","picky::bundle","picky::calculations","picky::calculations::location","picky::capistrano","picky::capistrano::all","picky::capistrano::caching","picky::capistrano::deploy","picky::capistrano::overrides","picky::capistrano::standard","picky::capistrano::statistics","picky::categories","picky::category","picky::charactersubstituters","picky::charactersubstituters::westeuropean","picky::frontendadapters","picky::frontendadapters::rack","picky::frontendadapters::rack::routetargetnilerror","picky::generators","picky::generators::base","picky::generators::partial","picky::generators::partial::infix","picky::generators::partial::none","picky::generators::partial::postfix","picky::generators::partial::strategy","picky::generators::partial::substring","picky::generators::partial::substringgenerator","picky::generators::similarity","picky::generators::similarity::doublemetaphone","picky::generators::similarity::metaphone","picky::generators::similarity::none","picky::generators::similarity::phonetic","picky::generators::similarity::soundex","picky::generators::similarity::strategy","picky::generators::strategy","picky::generators::weights","picky::generators::weights::logarithmic","picky::generators::weights::strategy","picky::helpers","picky::helpers::measuring","picky::index","picky::indexers","picky::indexers::base","picky::indexers::parallel","picky::indexers::serial","picky::indexes","picky::indexes::memory","picky::indexes::redis","picky::interfaces","picky::interfaces::liveparameters","picky::interfaces::liveparameters::couldnotupdateconfigurationerror","picky::query","picky::query::indexes","picky::query::indexescheck","picky::query::weights","picky::rack","picky::rack::harakiri","picky::results","picky::search","picky::sinatra","picky::sources","picky::sources::base","picky::sources::csv","picky::sources::csv::nofilegiven","picky::sources::couch","picky::sources::couch::nodbgiven","picky::sources::db","picky::sources::delicious","picky::sources::mongo","picky::sources::mongo::nodbgiven","picky::tokenizer","picky::tokenizers","picky::tokenizers::location","picky::try","picky::wrappers","picky::wrappers::bundle","picky::wrappers::bundle::calculation","picky::wrappers::bundle::delegator","picky::wrappers::bundle::exactpartial","picky::wrappers::bundle::indexeddelegator","picky::wrappers::bundle::indexingdelegator","picky::wrappers::bundle::location","picky::wrappers::bundle::wrapper","picky::wrappers::category","picky::wrappers::category::exactfirst","picky::wrappers::category::location","picky::categories#<<()","picky::query::weights#==()","picky::backends::file::json#[]()","picky::backends::redis::float#[]()","picky::backends::redis::list#[]()","picky::backends::redis::string#[]()","picky::bundle#[]()","picky::categories#[]()","picky::indexes#[]()","picky::backends::redis::string#[]=()","picky::bundle#add()","picky::category#add()","picky::wrappers::bundle::location#add()","picky::bundle#add_partialized()","picky::wrappers::bundle::location#add_partialized()","picky::category#add_tokenized()","picky::category#add_tokenized_token()","picky::index#after_indexing()","picky::query::indexes#allocation_for()","picky::query::indexes#allocations_ary_for()","picky::query::indexes#allocations_for()","picky::adapters::rack::app_for()","picky::backends::redis#at_least_version()","picky::index#backend()","picky::backends::file::basic#backup()","picky::backends::memory::basic#backup()","picky::backends::redis::basic#backup()","picky::bundle#backup()","picky::category#backup()","picky::backends::helpers::file#backup_directory()","picky::backends::helpers::file#backup_file_path_of()","picky::search#boost()","picky::category#bundle_for()","picky::category#cache()","picky::backends::file::basic#cache_ok?()","picky::backends::memory::basic#cache_ok?()","picky::backends::redis::basic#cache_ok?()","picky::backends::file::basic#cache_small?()","picky::backends::memory::basic#cache_small?()","picky::backends::redis::basic#cache_small?()","picky::wrappers::bundle::calculation#calculate()","picky::wrappers::bundle::location#calculate()","picky::application::call()","picky::rack::harakiri#call()","picky::tokenizer#cap()","picky::tokenizer#cap?()","picky::tokenizer#case_sensitive()","picky::index#category()","picky::category#check()","picky::tokenizer#check_argument_in()","picky::application::check_external_interface()","picky::index#check_source_empty()","picky::sources::db#chunksize()","picky::backends::file::json#clear()","picky::backends::redis::list#clear()","picky::backends::redis::string#clear()","picky::bundle#clear()","picky::category#clear()","picky::wrappers::bundle::exactpartial#clear()","picky::categories#clear_categories()","picky::bundle#clear_configuration()","picky::indexes#clear_indexes()","picky::bundle#clear_inverted()","picky::bundle#clear_realtime_mapping()","picky::category#clear_realtime_mapping()","picky::bundle#clear_similarity()","picky::bundle#clear_weights()","picky::interfaces::liveparameters#close_child()","picky::category#combination_for()","picky::sources::base#connect_backend()","picky::sources::db#connect_backend()","picky::sources::db#count()","picky::backends::file#create_configuration()","picky::backends::memory#create_configuration()","picky::backends::redis#create_configuration()","picky::backends::helpers::file#create_directory()","picky::backends::file#create_inverted()","picky::backends::memory#create_inverted()","picky::backends::redis#create_inverted()","picky::backends::file#create_similarity()","picky::backends::memory#create_similarity()","picky::backends::redis#create_similarity()","picky::backends::file#create_weights()","picky::backends::memory#create_weights()","picky::backends::redis#create_weights()","picky::index#define_after_indexing()","picky::index#define_category()","picky::index#define_indexing()","picky::index#define_key_format()","picky::index#define_ranged_category()","picky::index#define_result_identifier()","picky::index#define_source()","picky::backends::file::basic#delete()","picky::backends::memory::basic#delete()","picky::backends::redis::basic#delete()","picky::bundle#delete()","picky::tokenizer#downcase?()","picky::backends::file::json#dump()","picky::backends::memory::json#dump()","picky::backends::memory::marshal#dump()","picky::backends::memory::text#dump()","picky::backends::redis::list#dump()","picky::backends::redis::string#dump()","picky::bundle#dump()","picky::category#dump()","picky::wrappers::bundle::exactpartial#dump()","picky::wrappers::bundle::location#dump()","picky::bundle#dump_configuration()","picky::bundle#dump_inverted()","picky::bundle#dump_similarity()","picky::bundle#dump_weights()","picky::results#duration()","picky::category#each_category()","picky::generators::partial::infix#each_partial()","picky::generators::partial::none#each_partial()","picky::generators::partial::substring#each_partial()","picky::generators::partial::substringgenerator#each_subtoken()","picky::backends::file::basic#empty()","picky::backends::memory::basic#empty()","picky::backends::redis::basic#empty()","picky::bundle#empty()","picky::category#empty()","picky::wrappers::bundle::exactpartial#empty()","picky::bundle#empty_configuration()","picky::bundle#empty_inverted()","picky::bundle#empty_similarity()","picky::tokenizer#empty_tokens()","picky::bundle#empty_weights()","picky::generators::similarity::doublemetaphone#encoded()","picky::generators::similarity::metaphone#encoded()","picky::generators::similarity::none#encoded()","picky::generators::similarity::soundex#encoded()","picky::search#execute()","picky::query::indexes#expand_combinations_from()","picky::sinatra::extended()","picky::backends::file::basic#extension()","picky::backends::file::json#extension()","picky::backends::memory::basic#extension()","picky::backends::memory::json#extension()","picky::backends::memory::marshal#extension()","picky::backends::memory::text#extension()","picky::interfaces::liveparameters#extract_configuration()","picky::backends::redis::extract_host()","picky::backends::backend#extract_lambda_or()","picky::category#extract_qualifiers_from()","picky::category#extract_source()","picky::index#extract_source()","picky::adapters::rack::search#extracted()","picky::category#from()","picky::generators::partial::substring#from()","picky::results::from()","picky::wrappers::bundle::exactpartial#generate_caches_from_memory()","picky::generators::partial::infix#generate_for()","picky::generators::partial::substring#generate_for()","picky::generators::partial::infix#generate_from()","picky::generators::partial::none#generate_from()","picky::generators::partial::substring#generate_from()","picky::generators::similarity::none#generate_from()","picky::generators::similarity::phonetic#generate_from()","picky::generators::weights::logarithmic#generate_from()","picky::backends::redis#generate_intermediate_result_id()","picky::wrappers::bundle::exactpartial#generate_partial_from()","picky::interfaces::liveparameters#harakiri()","picky::rack::harakiri#harakiri()","picky::rack::harakiri#harakiri?()","picky::sources::csv#harvest()","picky::sources::couch#harvest()","picky::sources::db#harvest()","picky::sources::delicious#harvest()","picky::sources::mongo#harvest()","picky::sources::db#harvest_statement()","picky::sources::db#harvest_statement_with_offset()","picky::generators::similarity::phonetic#hashify()","picky::backends::redis#host()","picky::bundle#identifier()","picky::category#identifier()","picky::index#identifier()","picky::indexes::identifier()","picky::backends::file#ids()","picky::backends::memory#ids()","picky::backends::redis#ids()","picky::bundle#ids()","picky::category#ids()","picky::results#ids()","picky::wrappers::bundle::calculation#ids()","picky::wrappers::category::exactfirst#ids()","picky::query::indexes#ignore()","picky::search#ignore_unassigned_tokens()","picky::category#index()","picky::index#index()","picky::indexers::base#index()","picky::indexes#index()","picky::wrappers::bundle::exactpartial#index()","picky::tokenizer::index_default()","picky::tokenizer::index_default=()","picky::category#index_directory()","picky::indexes#index_for_tests()","picky::index#index_in_parallel()","picky::category#index_name()","picky::bundle#index_path()","picky::category#indexer()","picky::application::indexing()","picky::index#indexing()","picky::sinatra#indexing()","picky::backends::file::basic#initial()","picky::backends::memory::basic#initial()","picky::backends::memory::text#initial()","picky::backends::redis::basic#initial()","picky::categories#inject_possible_for()","picky::indexes::instance()","picky::bundle#key_format()","picky::category#key_format()","picky::index#key_format()","picky::interfaces::liveparameters#kill_each_worker_except()","picky::interfaces::liveparameters#kill_worker()","picky::backends::file::json#load()","picky::backends::memory::json#load()","picky::backends::memory::marshal#load()","picky::backends::memory::text#load()","picky::backends::redis::basic#load()","picky::bundle#load()","picky::wrappers::bundle::exactpartial#load()","picky::wrappers::bundle::location#load()","picky::bundle#load_configuration()","picky::category#load_from_cache()","picky::bundle#load_inverted()","picky::bundle#load_similarity()","picky::bundle#load_weights()","picky::results#log_type()","picky::query::indexes#map_categories()","picky::tokenizer#maximum_tokens()","performant::array::memory_efficient_intersect()","picky::adapters::rack::liveparameters::new()","picky::adapters::rack::search::new()","picky::backends::backend::new()","picky::backends::file::basic::new()","picky::backends::memory::basic::new()","picky::backends::redis::new()","picky::backends::redis::basic::new()","picky::bundle::new()","picky::categories::new()","picky::category::new()","picky::generators::partial::infix::new()","picky::generators::partial::postfix::new()","picky::generators::partial::substring::new()","picky::generators::partial::substringgenerator::new()","picky::generators::similarity::phonetic::new()","picky::index::new()","picky::indexers::base::new()","picky::indexes::new()","picky::indexes::memory::new()","picky::indexes::redis::new()","picky::interfaces::liveparameters::new()","picky::interfaces::liveparameters::couldnotupdateconfigurationerror::new()","picky::query::indexes::new()","picky::query::weights::new()","picky::rack::harakiri::new()","picky::results::new()","picky::search::new()","picky::sources::csv::new()","picky::sources::couch::new()","picky::sources::db::new()","picky::sources::delicious::new()","picky::sources::mongo::new()","picky::tokenizer::new()","picky::tokenizers::location::new()","picky::try::new()","picky::wrappers::bundle::exactpartial::new()","picky::wrappers::bundle::location::new()","picky::wrappers::bundle::wrapper::new()","picky::wrappers::category::exactfirst::new()","picky::tokenizer#normalize_with_patterns()","picky::tokenizer#normalize_with_patterns?()","picky::tokenizer#normalizes_words()","picky::indexers::base#notify_finished()","picky::backends::memory::text#open()","picky::try#output()","picky::interfaces::liveparameters#parameters()","picky::backends::redis#pid()","picky::categories#possible_categories()","picky::categories#possible_combinations()","picky::categories#possible_for()","picky::category#prepare()","picky::results#prepare!()","picky::backends::helpers::file#prepare_backup()","picky::query::indexes#prepared_allocations_for()","picky::category#prepared_index_file()","picky::category#prepared_index_path()","picky::tokenizer#preprocess()","picky::tokenizer#pretokenize()","picky::indexers::parallel#process()","picky::indexers::serial#process()","picky::category#qualifiers()","picky::tokenizer::query_default()","picky::tokenizer::query_default=()","picky::interfaces::liveparameters#querying_removes_characters()","picky::interfaces::liveparameters#querying_removes_characters=()","picky::interfaces::liveparameters#querying_splits_text_on()","picky::interfaces::liveparameters#querying_splits_text_on=()","picky::interfaces::liveparameters#querying_stopwords()","picky::interfaces::liveparameters#querying_stopwords=()","picky::bundle#raise_cache_missing()","picky::categories#raise_not_found()","picky::indexes#raise_not_found()","picky::bundle#raise_unless_cache_exists()","picky::bundle#raise_unless_index_exists()","picky::bundle#raise_unless_index_ok()","picky::bundle#raise_unless_similarity_exists()","picky::bundle#raise_unless_similarity_ok()","picky::index#ranged_category()","picky::backends::redis#redis_version()","picky::backends::redis#redis_with_scripting?()","picky::indexes#register()","picky::indexes::register()","picky::category#reindex()","picky::tokenizer#reject()","picky::tokenizer#rejects_token_if()","picky::application::reload()","picky::category#reload()","picky::bundle#remove()","picky::category#remove()","picky::tokenizer#remove_illegals()","picky::tokenizer#remove_non_single_stopwords()","picky::tokenizer#remove_stopwords()","picky::interfaces::liveparameters#remove_worker()","picky::tokenizer#removes_characters()","picky::category#replace()","picky::application::reset_rack_adapter()","picky::adapters::rack::base#respond_with()","picky::backends::file::basic#restore()","picky::backends::memory::basic#restore()","picky::bundle#restore()","picky::category#restore()","picky::index#result_identifier()","picky::backends::file::json#retrieve()","picky::backends::memory::json#retrieve()","picky::backends::memory::marshal#retrieve()","picky::backends::memory::text#retrieve()","picky::backends::redis::basic#retrieve()","picky::category#retrieve()","picky::application::route()","picky::try#saved()","picky::generators::partial::none#saved?()","picky::generators::similarity::none#saved?()","picky::generators::strategy#saved?()","picky::query::weights#score_for()","picky::search#search()","picky::search#search_with()","picky::try#searched()","picky::application::searching()","picky::search#searching()","picky::sinatra#searching()","picky::bundle#similar()","picky::categories#similar_possible_for()","picky::categories#similar_tokens_for()","picky::backends::redis::basic#size()","picky::backends::helpers::file#size_of()","picky::sources::db#snapshot_table_name()","picky::generators::similarity::phonetic#sort()","picky::category#source()","picky::index#source()","picky::tokenizer#split()","picky::tokenizer#splits_text_on()","picky::interfaces::liveparameters#start_master_process_thread()","picky::tokenizer#stopwords()","picky::charactersubstituters::westeuropean#substitute()","picky::tokenizer#substitute_characters()","picky::tokenizer#substitutes_characters_with()","picky::sources::base#take_snapshot()","picky::sources::db#take_snapshot()","picky::helpers::measuring#timed()","picky::generators::partial::substring#to()","picky::adapters::rack::liveparameters#to_app()","picky::adapters::rack::search#to_app()","picky::results#to_hash()","picky::results#to_json()","picky::application::to_routes()","picky::backends::backend#to_s()","picky::backends::file::basic#to_s()","picky::backends::memory::basic#to_s()","picky::backends::redis::basic#to_s()","picky::bundle#to_s()","picky::categories#to_s()","picky::category#to_s()","picky::index#to_s()","picky::indexes#to_s()","picky::interfaces::liveparameters#to_s()","picky::query::weights#to_s()","picky::results#to_s()","picky::search#to_s()","picky::sources::csv#to_s()","picky::sources::couch#to_s()","picky::sources::db#to_s()","picky::sources::delicious#to_s()","picky::sources::mongo#to_s()","picky::tokenizer#to_s()","picky::application::to_stats()","picky::try#to_stdout()","picky::tokenizer#tokenize()","picky::tokenizers::location#tokenize()","picky::search#tokenized()","picky::category#tokenizer()","picky::index#tokenizer()","picky::indexes#tokenizer()","picky::wrappers::category::location#tokenizer()","picky::tokenizer#tokens_for()","picky::results#total()","picky::interfaces::liveparameters#try_updating_configuration_with()","picky::generators::partial::none#use_exact_for_partial?()","picky::generators::partial::strategy#use_exact_for_partial?()","picky::bundle#warn_cache_small()","picky::bundle#warn_if_index_small()","picky::bundle#warn_if_similarity_small()","picky::index#warn_no_source()","picky::bundle#weight()","picky::category#weight()","picky::wrappers::bundle::calculation#weight()","picky::wrappers::category::exactfirst#weight()","picky::generators::weights::logarithmic#weight_for()","picky::query::weights#weight_for()","picky::category#with_data_snapshot()","picky::index#with_data_snapshot()","picky::sources::base#with_snapshot()","picky::interfaces::liveparameters#worker_pids()","picky::wrappers::category::exactfirst::wrap()","picky::wrappers::category::location::wrap()","picky::wrappers::category::exactfirst::wrap_each_of()","picky::interfaces::liveparameters#write_parent()",""],"info":[["Object","","classes/Object.html","",""],["Performant","","classes/Performant.html","",""],["Performant::Array","","classes/Performant/Array.html","",""],["Picky","","classes/Picky.html","","<p>THINK Does it also remove diaritics, like べ to へ?\n"],["Picky::Adapters","","classes/Picky/Adapters.html","",""],["Picky::Adapters::Rack","","classes/Picky/Adapters/Rack.html","","<p>Adapter that is plugged into a Rack outlet.\n<p>This is an adapter that is plugged into a Rack outlet.\n<p>It looks …\n"],["Picky::Adapters::Rack::Base","","classes/Picky/Adapters/Rack/Base.html","","<p>Subclasses of this class should respond to\n<p>to_app(options)\n\n"],["Picky::Adapters::Rack::LiveParameters","","classes/Picky/Adapters/Rack/LiveParameters.html","",""],["Picky::Adapters::Rack::Search","","classes/Picky/Adapters/Rack/Search.html","",""],["Picky::Application","","classes/Picky/Application.html","","<p>Picky Applications\n<p>A Picky Application is where you configure the whole search engine.\n<p>This is a step-by-step …\n"],["Picky::Backends","","classes/Picky/Backends.html","",""],["Picky::Backends::Backend","","classes/Picky/Backends/Backend.html","",""],["Picky::Backends::File","","classes/Picky/Backends/File.html","","<p>Naive implementation of a file-based index. In-Memory Hash with length,\noffset:\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">bla</span> =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">20</span>, <span class=\"ruby-value\">312</span>] }\n</pre>\n"],["Picky::Backends::File::Basic","","classes/Picky/Backends/File/Basic.html","","<p>Base class for all file-based index files.\n<p>Provides necessary helper methods for its subclasses. Not directly …\n"],["Picky::Backends::File::JSON","","classes/Picky/Backends/File/JSON.html","","<p>File-based index files dumped in the JSON format.\n"],["Picky::Backends::Helpers","","classes/Picky/Backends/Helpers.html","",""],["Picky::Backends::Helpers::File","","classes/Picky/Backends/Helpers/File.html","","<p>Common file helpers.\n"],["Picky::Backends::Memory","","classes/Picky/Backends/Memory.html","",""],["Picky::Backends::Memory::Basic","","classes/Picky/Backends/Memory/Basic.html","","<p>Base class for all memory-based index files.\n<p>Provides necessary helper methods for its subclasses. Not …\n"],["Picky::Backends::Memory::JSON","","classes/Picky/Backends/Memory/JSON.html","","<p>Memory-based index files dumped in the JSON format.\n"],["Picky::Backends::Memory::Marshal","","classes/Picky/Backends/Memory/Marshal.html","","<p>Index data in the Ruby Marshal format.\n"],["Picky::Backends::Memory::Text","","classes/Picky/Backends/Memory/Text.html","","<p>Index data dumped in the text format.\n<p>TODO Should this really be Memory::Text?\n"],["Picky::Backends::Redis","","classes/Picky/Backends/Redis.html","",""],["Picky::Backends::Redis::Basic","","classes/Picky/Backends/Redis/Basic.html","","<p>Redis Backend Accessor.\n<p>Provides necessary helper methods for its subclasses. Not directly useable,\nas …\n"],["Picky::Backends::Redis::Float","","classes/Picky/Backends/Redis/Float.html","",""],["Picky::Backends::Redis::List","","classes/Picky/Backends/Redis/List.html","",""],["Picky::Backends::Redis::String","","classes/Picky/Backends/Redis/String.html","",""],["Picky::Bundle","","classes/Picky/Bundle.html","","<p>A Bundle is a number of indexes per [index, category] combination.\n<p>At most, there are three indexes:\n<p><strong>core</strong> …\n"],["Picky::Calculations","","classes/Picky/Calculations.html","",""],["Picky::Calculations::Location","","classes/Picky/Calculations/Location.html","",""],["Picky::Capistrano","","classes/Picky/Capistrano.html","",""],["Picky::Capistrano::All","","classes/Picky/Capistrano/All.html","",""],["Picky::Capistrano::Caching","","classes/Picky/Capistrano/Caching.html","",""],["Picky::Capistrano::Deploy","","classes/Picky/Capistrano/Deploy.html","",""],["Picky::Capistrano::Overrides","","classes/Picky/Capistrano/Overrides.html","",""],["Picky::Capistrano::Standard","","classes/Picky/Capistrano/Standard.html","",""],["Picky::Capistrano::Statistics","","classes/Picky/Capistrano/Statistics.html","",""],["Picky::Categories","","classes/Picky/Categories.html","",""],["Picky::Category","","classes/Picky/Category.html","",""],["Picky::CharacterSubstituters","","classes/Picky/CharacterSubstituters.html","",""],["Picky::CharacterSubstituters::WestEuropean","","classes/Picky/CharacterSubstituters/WestEuropean.html","","<p>Substitutes Umlauts like ä, ö, ü =&gt; ae, oe, ue. (and more, see specs)\n"],["Picky::FrontendAdapters","","classes/Picky/FrontendAdapters.html","",""],["Picky::FrontendAdapters::Rack","","classes/Picky/FrontendAdapters/Rack.html","",""],["Picky::FrontendAdapters::Rack::RouteTargetNilError","","classes/Picky/FrontendAdapters/Rack/RouteTargetNilError.html","",""],["Picky::Generators","","classes/Picky/Generators.html","","<p>encoding: utf-8\n<p>encoding: utf-8\n<p>encoding: utf-8\n"],["Picky::Generators::Base","","classes/Picky/Generators/Base.html","",""],["Picky::Generators::Partial","","classes/Picky/Generators/Partial.html","",""],["Picky::Generators::Partial::Infix","","classes/Picky/Generators/Partial/Infix.html","","<p>The subtoken partial strategy.\n<p>If given “florian” it will index “floria”, “flori”, …\n"],["Picky::Generators::Partial::None","","classes/Picky/Generators/Partial/None.html","","<p>Does not generate a partial index.\n"],["Picky::Generators::Partial::Postfix","","classes/Picky/Generators/Partial/Postfix.html","",""],["Picky::Generators::Partial::Strategy","","classes/Picky/Generators/Partial/Strategy.html","","<p>Superclass for partial strategies.\n"],["Picky::Generators::Partial::Substring","","classes/Picky/Generators/Partial/Substring.html","","<p>The subtoken partial strategy.\n<p>If given “florian” it will index “floria”, “flori”, …\n"],["Picky::Generators::Partial::SubstringGenerator","","classes/Picky/Generators/Partial/SubstringGenerator.html","","<p>Generates the right substrings for use in the substring strategy.\n"],["Picky::Generators::Similarity","","classes/Picky/Generators/Similarity.html","",""],["Picky::Generators::Similarity::DoubleMetaphone","","classes/Picky/Generators/Similarity/DoubleMetaphone.html","","<p>It’s actually a combination of double metaphone and Levenshtein.\n<p>It uses the double metaphone to get similar …\n"],["Picky::Generators::Similarity::Metaphone","","classes/Picky/Generators/Similarity/Metaphone.html","","<p>It’s actually a combination of metaphone and Levenshtein.\n<p>It uses the metaphone to get similar words and …\n"],["Picky::Generators::Similarity::None","","classes/Picky/Generators/Similarity/None.html","","<p>Similarity strategy that does nothing.\n"],["Picky::Generators::Similarity::Phonetic","","classes/Picky/Generators/Similarity/Phonetic.html","","<p>It’s actually a combination of double metaphone and Levenshtein.\n<p>It uses the double metaphone to get similar …\n"],["Picky::Generators::Similarity::Soundex","","classes/Picky/Generators/Similarity/Soundex.html","","<p>It’s actually a combination of soundex and Levenshtein.\n<p>It uses the soundex to get similar words and ranks …\n"],["Picky::Generators::Similarity::Strategy","","classes/Picky/Generators/Similarity/Strategy.html","","<p>Base class for all similarity strategies.\n"],["Picky::Generators::Strategy","","classes/Picky/Generators/Strategy.html","",""],["Picky::Generators::Weights","","classes/Picky/Generators/Weights.html","",""],["Picky::Generators::Weights::Logarithmic","","classes/Picky/Generators/Weights/Logarithmic.html","","<p>Uses a logarithmic weight. If for a key k we have x ids, the weight is:\nw(x): log(x) Special case: If …\n"],["Picky::Generators::Weights::Strategy","","classes/Picky/Generators/Weights/Strategy.html","","<p>Superclass for weighing strategies.\n"],["Picky::Helpers","","classes/Picky/Helpers.html","","<p>Helper methods for measuring, benchmarking, logging.\n"],["Picky::Helpers::Measuring","","classes/Picky/Helpers/Measuring.html","",""],["Picky::Index","","classes/Picky/Index.html","","<p>Picky Indexes\n<p>A Picky Index defines\n<p>what backend it uses.\n"],["Picky::Indexers","","classes/Picky/Indexers.html","",""],["Picky::Indexers::Base","","classes/Picky/Indexers/Base.html","",""],["Picky::Indexers::Parallel","","classes/Picky/Indexers/Parallel.html","","<p>Uses a number of categories, a source, and a tokenizer to index data.\n<p>The tokenizer is taken from each …\n"],["Picky::Indexers::Serial","","classes/Picky/Indexers/Serial.html","","<p>Uses a category to index its data.\n<p>Note: It is called serial since it indexes each category separately. …\n"],["Picky::Indexes","","classes/Picky/Indexes.html","","<p>Holds all indexes and provides operations for extracting and working on\nthem.\n<p>Delegates a number of operations …\n"],["Picky::Indexes::Memory","","classes/Picky/Indexes/Memory.html","",""],["Picky::Indexes::Redis","","classes/Picky/Indexes/Redis.html","",""],["Picky::Interfaces","","classes/Picky/Interfaces.html","","<p>This is very optional. Only load if the user wants it.\n"],["Picky::Interfaces::LiveParameters","","classes/Picky/Interfaces/LiveParameters.html","","<p>This is an interface that provides the user of Picky with the possibility\nto change parameters while …\n"],["Picky::Interfaces::LiveParameters::CouldNotUpdateConfigurationError","","classes/Picky/Interfaces/LiveParameters/CouldNotUpdateConfigurationError.html","",""],["Picky::Query","","classes/Picky/Query.html","","<p>coding: utf-8\n<p>encoding: utf-8\n"],["Picky::Query::Indexes","","classes/Picky/Query/Indexes.html","","<p>The query indexes class bundles indexes given to a query.\n<p>Example:\n\n<pre># If you call\nSearch.new dvd_index, ...</pre>\n"],["Picky::Query::IndexesCheck","","classes/Picky/Query/IndexesCheck.html","","<p>TODO Remove.\n"],["Picky::Query::Weights","","classes/Picky/Query/Weights.html","","<p>Calculates scores/weights for combinations.\n<p>Example:\n\n<pre>Someone searches for peter fish.\nPicky might match ...</pre>\n"],["Picky::Rack","","classes/Picky/Rack.html","",""],["Picky::Rack::Harakiri","","classes/Picky/Rack/Harakiri.html","","<p>Simple Rack Middleware to kill Unicorns after X requests.\n<p>Use as follows in e.g. your rackup File:\n\n<pre>Rack::Harakiri.after ...</pre>\n"],["Picky::Results","","classes/Picky/Results.html","","<p>This is the internal results object. Usually, to_marshal, or to_json is\ncalled on it to get a string …\n"],["Picky::Search","","classes/Picky/Search.html","","<p>Picky Searches\n<p>A Picky Search is an object which:\n\n<pre>* holds one or more indexes\n* offers an interface to ...</pre>\n"],["Picky::Sinatra","","classes/Picky/Sinatra.html","","<p>This Module is used to install delegator methods into the class for use\nwith Sinatra.\n"],["Picky::Sources","","classes/Picky/Sources.html","","<p>Data Sources\n<p>Currently, Picky offers the following Sources:\n<p>CSV (comma – or other – separated file)\n"],["Picky::Sources::Base","","classes/Picky/Sources/Base.html","","<p>Sources are where your data comes from.\n<p>A source has 1 mandatory and 2 optional methods:\n<p>connect_backend …\n"],["Picky::Sources::CSV","","classes/Picky/Sources/CSV.html","","<p>Describes a CSV source, a file with comma separated values in it.\n<p>The first column is implicitly assumed …\n"],["Picky::Sources::CSV::NoFileGiven","","classes/Picky/Sources/CSV/NoFileGiven.html","","<p>Raised when a CSV source is instantiated without a file.\n<p>Example:\n\n<pre>Sources::CSV.new(:column1, :column2) ...</pre>\n"],["Picky::Sources::Couch","","classes/Picky/Sources/Couch.html","","<p>A Couch database source.\n<p>Options:\n<p>url\n"],["Picky::Sources::Couch::NoDBGiven","","classes/Picky/Sources/Couch/NoDBGiven.html","","<p>Raised when a Couch source is instantiated without a file.\n<p>Example:\n\n<pre>Picky::Sources::Couch.new(:column1, ...</pre>\n"],["Picky::Sources::DB","","classes/Picky/Sources/DB.html","","<p>Describes a database source. Needs a SELECT statement (with id in it), and\na file option or the options …\n"],["Picky::Sources::Delicious","","classes/Picky/Sources/Delicious.html","","<p>Describes a Delicious (deli.cio.us) source.\n<p>This source has a fixed set of categories:\n<p>title\n"],["Picky::Sources::Mongo","","classes/Picky/Sources/Mongo.html","","<p>Important note: We’re not sure if this works already.\n<p>A Mongo database source.\n<p>Options:\n"],["Picky::Sources::Mongo::NoDBGiven","","classes/Picky/Sources/Mongo/NoDBGiven.html","","<p>Raised when a Mongo source is instantiated without a valid uri.\n<p>Important! You have to start your mongodb …\n"],["Picky::Tokenizer","","classes/Picky/Tokenizer.html","","<p>Defines tokenizing processes used both in indexing and querying.\n"],["Picky::Tokenizers","","classes/Picky/Tokenizers.html","",""],["Picky::Tokenizers::Location","","classes/Picky/Tokenizers/Location.html","",""],["Picky::Try","","classes/Picky/Try.html","",""],["Picky::Wrappers","","classes/Picky/Wrappers.html","",""],["Picky::Wrappers::Bundle","","classes/Picky/Wrappers/Bundle.html","","<p>Per Bundle wrappers.\n"],["Picky::Wrappers::Bundle::Calculation","","classes/Picky/Wrappers/Bundle/Calculation.html","","<p>A calculation rewrites the symbol into a float.\n<p>Note: A calculation will try to find a float in the index, …\n"],["Picky::Wrappers::Bundle::Delegator","","classes/Picky/Wrappers/Bundle/Delegator.html","",""],["Picky::Wrappers::Bundle::ExactPartial","","classes/Picky/Wrappers/Bundle/ExactPartial.html","","<p>This index combines a partial and exact bundle such that a partial index\nwill not be dumped or generated. …\n"],["Picky::Wrappers::Bundle::IndexedDelegator","","classes/Picky/Wrappers/Bundle/IndexedDelegator.html","",""],["Picky::Wrappers::Bundle::IndexingDelegator","","classes/Picky/Wrappers/Bundle/IndexingDelegator.html","",""],["Picky::Wrappers::Bundle::Location","","classes/Picky/Wrappers/Bundle/Location.html","","<p>A location calculation recalculates a location to the Picky internal\nlocation.\n"],["Picky::Wrappers::Bundle::Wrapper","","classes/Picky/Wrappers/Bundle/Wrapper.html","","<p>Base wrapper. Just delegates all methods to the bundle.\n"],["Picky::Wrappers::Category","","classes/Picky/Wrappers/Category.html","",""],["Picky::Wrappers::Category::ExactFirst","","classes/Picky/Wrappers/Category/ExactFirst.html","","<p>This index combines an exact and partial index. It serves to order the\nresults such that exact hits are …\n"],["Picky::Wrappers::Category::Location","","classes/Picky/Wrappers/Category/Location.html","",""],["<<","Picky::Categories","classes/Picky/Categories.html#method-i-3C-3C","(category)","<p>Add the given category to the list of categories.\n"],["==","Picky::Query::Weights","classes/Picky/Query/Weights.html#method-i-3D-3D","(other)","<p>A Weights instance is == to another if the weights are the same.\n"],["[]","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-5B-5D","(key)","<p>See lib/picky/backends/file.rb for what this should return.\n<p>Gets the length and offset for the key.\n<p>Extracts …\n"],["[]","Picky::Backends::Redis::Float","classes/Picky/Backends/Redis/Float.html#method-i-5B-5D","(key)","<p>Get a single value.\n<p>Internal API method for the index.\n<p>Note: Works like the StringHash method, but returns …\n"],["[]","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-5B-5D","(key)","<p>Get a collection.\n<p>Internal API method for the index.\n"],["[]","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-5B-5D","(key)","<p>Get a single value.\n<p>Internal API method for the index.\n"],["[]","Picky::Bundle","classes/Picky/Bundle.html#method-i-5B-5D","(sym)","<p>Get settings for this bundle.\n<p>Returns an object.\n"],["[]","Picky::Categories","classes/Picky/Categories.html#method-i-5B-5D","(category_name)","<p>Find a given category in the categories.\n"],["[]","Picky::Indexes","classes/Picky/Indexes.html#method-i-5B-5D","(identifier)","<p>Extracts an index, given its identifier.\n"],["[]=","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-5B-5D-3D","(key, value)","<p>Set a single value\n"],["add","Picky::Bundle","classes/Picky/Bundle.html#method-i-add","(id, sym, where = :unshift)","<p>Returns a reference to the array where the id has been added.\n<p>TODO Rename sym.\n"],["add","Picky::Category","classes/Picky/Category.html#method-i-add","(object, where = :unshift)","<p>Adds and indexes this category of the given object.\n"],["add","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-add","(id, location, where = :unshift)","<p>Recalculates the added location.\n"],["add_partialized","Picky::Bundle","classes/Picky/Bundle.html#method-i-add_partialized","(id, text, where = :unshift)","<p>Partializes the text and then adds each.\n"],["add_partialized","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-add_partialized","(does_not, matter, at_all)","<p>Do not generate a partial.\n"],["add_tokenized","Picky::Category","classes/Picky/Category.html#method-i-add_tokenized","(id, tokens, where = :unshift)","<p>For the given id, adds the list of strings to the index for the given id.\n"],["add_tokenized_token","Picky::Category","classes/Picky/Category.html#method-i-add_tokenized_token","(id, text, where = :unshift)",""],["after_indexing","Picky::Index","classes/Picky/Index.html#method-i-after_indexing","(after_indexing = nil)","<p>Define what to do after indexing. (Only used in the Sources::DB)\n"],["allocation_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-allocation_for","(tokens, index)",""],["allocations_ary_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-allocations_ary_for","(tokens)",""],["allocations_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-allocations_for","(tokens)","<p>Returns a number of possible allocations for the given tokens.\n"],["app_for","Picky::Adapters::Rack","classes/Picky/Adapters/Rack.html#method-c-app_for","(thing, options = {})",""],["at_least_version","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-at_least_version","(major_minor_patch, should_be)","<p>Compares two versions each in an array [major, minor, patch] format and\nreturns true if the first version …\n"],["backend","Picky::Index","classes/Picky/Index.html#method-i-backend","(backend = nil)","<p>API method.\n<p>Sets/returns the backend used. Default is @Backends::Memory.new@.\n"],["backup","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-backup","()","<p>Will copy the index file to a location that is in a directory named\n“backup” right under the …\n"],["backup","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-backup","()","<p>Will copy the index file to a location that is in a directory named\n“backup” right under the …\n"],["backup","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-backup","()","<p>Redis doesn’t do backup.\n"],["backup","Picky::Bundle","classes/Picky/Bundle.html#method-i-backup","()","<p>Copies the indexes to the “backup” directory.\n"],["backup","Picky::Category","classes/Picky/Category.html#method-i-backup","()","<p>Backup the caches. (Revert with restore_caches)\n"],["backup_directory","Picky::Backends::Helpers::File","classes/Picky/Backends/Helpers/File.html#method-i-backup_directory","(path)","<p>The backup directory of this file. Equal to the file’s dirname plus /backup\n"],["backup_file_path_of","Picky::Backends::Helpers::File","classes/Picky/Backends/Helpers/File.html#method-i-backup_file_path_of","(path)","<p>The backup filename.\n"],["boost","Picky::Search","classes/Picky/Search.html#method-i-boost","(weights)","<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">search</span> = <span class=\"ruby-constant\">Search</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">books_index</span>, <span class=\"ruby-identifier\">dvd_index</span>, <span class=\"ruby-identifier\">mp3_index</span>) <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">boost</span> [:<span class=\"ruby-identifier\">author</span>, :<span class=\"ruby-identifier\">title</span>] =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">+3</span>,\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["bundle_for","Picky::Category","classes/Picky/Category.html#method-i-bundle_for","(token)","<p>Returns the right index bundle for this token.\n"],["cache","Picky::Category","classes/Picky/Category.html#method-i-cache","()","<p>Generates all caches for this category.\n"],["cache_ok?","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-cache_ok-3F","()","<p>Is the cache ok? (existing and larger than zero Bytes in size)\n<p>A small cache is still ok.\n"],["cache_ok?","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-cache_ok-3F","()","<p>Is the cache ok? (existing and larger than zero Bytes in size)\n<p>A small cache is still ok.\n"],["cache_ok?","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-cache_ok-3F","()","<p>Is the cache ok?\n<p>A small cache is still ok.\n"],["cache_small?","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-cache_small-3F","()","<p>Is this cache file suspiciously small? (less than 8 Bytes of size)\n"],["cache_small?","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-cache_small-3F","()","<p>Is this cache file suspiciously small? (less than 8 Bytes of size)\n"],["cache_small?","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-cache_small-3F","()","<p>Is this cache suspiciously small?\n"],["calculate","Picky::Wrappers::Bundle::Calculation","classes/Picky/Wrappers/Bundle/Calculation.html#method-i-calculate","(float)","<p>API.\n<p>By default, a calculation does not calculate anything.\n"],["calculate","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-calculate","(float)",""],["call","Picky::Application","classes/Picky/Application.html#method-c-call","(env)","<p>A Picky application implements the Rack interface.\n<p>Delegates to its routing to handle a request.\n"],["call","Picky::Rack::Harakiri","classes/Picky/Rack/Harakiri.html#method-i-call","(env)","<p>#call interface method.\n<p>Harakiri is a middleware, so it delegates the the app or the next\nmiddleware after …\n"],["cap","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-cap","(words)",""],["cap?","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-cap-3F","(words)",""],["case_sensitive","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-case_sensitive","(case_sensitive)",""],["category","Picky::Index","classes/Picky/Index.html#method-i-category","(category_name, options = {})","<p>API method.\n<p>Defines a searchable category on the index.\n<p>Parameters\n"],["check","Picky::Category","classes/Picky/Category.html#method-i-check","()","<p>Checks the caches for existence.\n"],["check_argument_in","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-check_argument_in","(method, type, argument, &condition)","<p>Checks if the right argument type has been given.\n"],["check_external_interface","Picky::Application","classes/Picky/Application.html#method-c-check_external_interface","()",""],["check_source_empty","Picky::Index","classes/Picky/Index.html#method-i-check_source_empty","()","<p>Check if the given enumerable source is empty.\n<p>Note: Checking as early as possible to tell the\n\n<pre>user as ...</pre>\n"],["chunksize","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-chunksize","()","<p>The amount of records that are loaded each chunk.\n"],["clear","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-clear","()","<p>Clears the currently loaded index.\n<p>Note: This only clears the in-memory mapping,\n\n<pre>but this is enough for ...</pre>\n"],["clear","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-clear","()","<p>Clear the index for this list.\n<p>Note: Perhaps we can use a server only command.\n\n<pre>This is not the optimal ...</pre>\n"],["clear","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-clear","()","<p>Clears the hash.\n"],["clear","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear","()","<p>Clears all indexes.\n"],["clear","Picky::Category","classes/Picky/Category.html#method-i-clear","()","<p>Deletes the caches.\n"],["clear","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-clear","()",""],["clear_categories","Picky::Categories","classes/Picky/Categories.html#method-i-clear_categories","()","<p>Clears both the array of categories and the hash of categories.\n"],["clear_configuration","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_configuration","()","<p>Clears the configuration.\n"],["clear_indexes","Picky::Indexes","classes/Picky/Indexes.html#method-i-clear_indexes","()","<p>Clears the indexes and the mapping.\n"],["clear_inverted","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_inverted","()","<p>Clears the core index.\n"],["clear_realtime_mapping","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_realtime_mapping","()","<p>Clears the realtime mapping.\n"],["clear_realtime_mapping","Picky::Category","classes/Picky/Category.html#method-i-clear_realtime_mapping","()","<p>Clears the realtime mapping.\n"],["clear_similarity","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_similarity","()","<p>Clears the similarity index.\n"],["clear_weights","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_weights","()","<p>Clears the weights index.\n"],["close_child","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-close_child","()","<p>Close the child if it isn’t yet closed.\n"],["combination_for","Picky::Category","classes/Picky/Category.html#method-i-combination_for","(token)","<p>Returns a combination for the token, or nil, if there is none.\n"],["connect_backend","Picky::Sources::Base","classes/Picky/Sources/Base.html#method-i-connect_backend","()","<p>Connect to the backend.\n<p>Called once per index/category combination before harvesting.\n<p>Examples:\n"],["connect_backend","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-connect_backend","()","<p>Connect the backend.\n<p>Will raise unless connection options have been given.\n"],["count","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-count","(index_name)","<p>Counts all the entries that are used for the index.\n"],["create_configuration","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_configuration","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">key</span>] <span class=\"ruby-comment\"># =&gt; value (a value ...</span>\n</pre>\n"],["create_configuration","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_configuration","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">key</span>] <span class=\"ruby-comment\"># =&gt; value (a value ...</span>\n</pre>\n"],["create_configuration","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_configuration","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">key</span>] <span class=\"ruby-comment\"># =&gt; value (a value ...</span>\n</pre>\n"],["create_directory","Picky::Backends::Helpers::File","classes/Picky/Backends/Helpers/File.html#method-i-create_directory","(path)","<p>Creates all necessary directories.\n"],["create_inverted","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_inverted","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; [id, id, id, ...</span>\n</pre>\n"],["create_inverted","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_inverted","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; [id, id, id, ...</span>\n</pre>\n"],["create_inverted","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_inverted","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; [id, id, id, ...</span>\n</pre>\n"],["create_similarity","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_similarity","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">encoded</span>] <span class=\"ruby-comment\"># =&gt; [:original, ...</span>\n</pre>\n"],["create_similarity","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_similarity","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">encoded</span>] <span class=\"ruby-comment\"># =&gt; [:original, ...</span>\n</pre>\n"],["create_similarity","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_similarity","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">encoded</span>] <span class=\"ruby-comment\"># =&gt; [:original, ...</span>\n</pre>\n"],["create_weights","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_weights","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; 1.23 (a weight)</span>\n</pre>\n"],["create_weights","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_weights","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; 1.23 (a weight)</span>\n</pre>\n"],["create_weights","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_weights","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; 1.23 (a weight)</span>\n</pre>\n"],["define_after_indexing","Picky::Index","classes/Picky/Index.html#method-i-define_after_indexing","(after_indexing)",""],["define_category","Picky::Index","classes/Picky/Index.html#method-i-define_category","(category_name, options = {})",""],["define_indexing","Picky::Index","classes/Picky/Index.html#method-i-define_indexing","(options = {})",""],["define_key_format","Picky::Index","classes/Picky/Index.html#method-i-define_key_format","(key_format)",""],["define_ranged_category","Picky::Index","classes/Picky/Index.html#method-i-define_ranged_category","(category_name, range, options = {})",""],["define_result_identifier","Picky::Index","classes/Picky/Index.html#method-i-define_result_identifier","(result_identifier)",""],["define_source","Picky::Index","classes/Picky/Index.html#method-i-define_source","(source)",""],["delete","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-delete","()","<p>Deletes the file.\n"],["delete","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-delete","()","<p>Deletes the file.\n"],["delete","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-delete","()","<p>Deletes the Redis index namespace.\n"],["delete","Picky::Bundle","classes/Picky/Bundle.html#method-i-delete","()","<p>Delete all index files.\n"],["downcase?","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-downcase-3F","()",""],["dump","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-dump","(hash)","<p>Dumps the index hash in json format.\n<p>Dump actual data.\n<p>Dumps mapping key =&gt; [length, offset].\n"],["dump","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-dump","(hash)","<p>Dumps the index hash in json format.\n"],["dump","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-dump","(hash)","<p>Dumps the index hash in marshal format.\n"],["dump","Picky::Backends::Memory::Text","classes/Picky/Backends/Memory/Text.html#method-i-dump","(hash)","<p>Text files are used exclusively for prepared data files.\n"],["dump","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-dump","(hash)","<p>Writes the hash into Redis.\n"],["dump","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-dump","(hash)","<p>Writes the hash into Redis.\n<p>Note: We could use multi, but it did not help.\n"],["dump","Picky::Bundle","classes/Picky/Bundle.html#method-i-dump","()","<p>Saves the indexes in a dump file.\n"],["dump","Picky::Category","classes/Picky/Category.html#method-i-dump","()",""],["dump","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-dump","()",""],["dump","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-dump","()","<p>Save the config, then dump normally.\n"],["dump_configuration","Picky::Bundle","classes/Picky/Bundle.html#method-i-dump_configuration","()","<p>Dumps the similarity index.\n"],["dump_inverted","Picky::Bundle","classes/Picky/Bundle.html#method-i-dump_inverted","()","<p>Dumps the core index.\n"],["dump_similarity","Picky::Bundle","classes/Picky/Bundle.html#method-i-dump_similarity","()","<p>Dumps the similarity index.\n"],["dump_weights","Picky::Bundle","classes/Picky/Bundle.html#method-i-dump_weights","()","<p>Dumps the weights index.\n"],["duration","Picky::Results","classes/Picky/Results.html#method-i-duration","()","<p>Duration default is 0.\n"],["each_category","Picky::Category","classes/Picky/Category.html#method-i-each_category","()","<p>The category itself just yields itself.\n"],["each_partial","Picky::Generators::Partial::Infix","classes/Picky/Generators/Partial/Infix.html#method-i-each_partial","(token, &block)","<p>Yields each generated partial.\n"],["each_partial","Picky::Generators::Partial::None","classes/Picky/Generators/Partial/None.html#method-i-each_partial","(token)","<p>Yields each generated partial.\n"],["each_partial","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-each_partial","(token, &block)","<p>Yields each generated partial.\n"],["each_subtoken","Picky::Generators::Partial::SubstringGenerator","classes/Picky/Generators/Partial/SubstringGenerator.html#method-i-each_subtoken","(token, &block)",""],["empty","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-empty","()","<p>The empty index that is used for putting the index together before it is\nsaved into the files.\n"],["empty","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-empty","()","<p>The empty index that is used for putting the index together before it is\ndumped into the files.\n"],["empty","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-empty","()","<p>The empty index that is used for putting the index together.\n"],["empty","Picky::Bundle","classes/Picky/Bundle.html#method-i-empty","()","<p>“Empties” the index(es) by getting a new empty internal backend instance.\n"],["empty","Picky::Category","classes/Picky/Category.html#method-i-empty","()","<p>Empty all the indexes.\n"],["empty","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-empty","()",""],["empty_configuration","Picky::Bundle","classes/Picky/Bundle.html#method-i-empty_configuration","()",""],["empty_inverted","Picky::Bundle","classes/Picky/Bundle.html#method-i-empty_inverted","()",""],["empty_similarity","Picky::Bundle","classes/Picky/Bundle.html#method-i-empty_similarity","()",""],["empty_tokens","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-empty_tokens","()","<p>Returns empty tokens.\n"],["empty_weights","Picky::Bundle","classes/Picky/Bundle.html#method-i-empty_weights","()",""],["encoded","Picky::Generators::Similarity::DoubleMetaphone","classes/Picky/Generators/Similarity/DoubleMetaphone.html#method-i-encoded","(sym)","<p>Encodes the given symbol.\n<p>Returns a symbol.\n"],["encoded","Picky::Generators::Similarity::Metaphone","classes/Picky/Generators/Similarity/Metaphone.html#method-i-encoded","(sym)","<p>Encodes the given symbol.\n<p>Returns a symbol.\n"],["encoded","Picky::Generators::Similarity::None","classes/Picky/Generators/Similarity/None.html#method-i-encoded","(text)","<p>Does not encode text. Just returns nil.\n"],["encoded","Picky::Generators::Similarity::Soundex","classes/Picky/Generators/Similarity/Soundex.html#method-i-encoded","(sym)","<p>Encodes the given symbol.\n<p>Returns a symbol.\n"],["execute","Picky::Search","classes/Picky/Search.html#method-i-execute","(tokens, ids, offset, original_text = nil)","<p>Execute a search using Query::Tokens.\n<p>Note: Internal method, use #search to search.\n"],["expand_combinations_from","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-expand_combinations_from","(possible_combinations)","<p>This is the core of the search engine. No kidding.\n<p>Gets an array of [\n\n<pre>[&lt;combinations for token1&gt;],\n[&lt;combinations ...</pre>\n"],["extended","Picky::Sinatra","classes/Picky/Sinatra.html#method-c-extended","(into)","<p>Privatizes app file methods.\n"],["extension","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-extension","()","<p>The default extension for index files is “index”.\n"],["extension","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-extension","()","<p>Uses the extension “json”.\n"],["extension","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-extension","()","<p>The default extension for index files is “index”.\n"],["extension","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-extension","()","<p>Uses the extension “json”.\n"],["extension","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-extension","()","<p>Uses the extension “dump”.\n"],["extension","Picky::Backends::Memory::Text","classes/Picky/Backends/Memory/Text.html#method-i-extension","()","<p>Uses the extension “txt”.\n"],["extract_configuration","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-extract_configuration","()",""],["extract_host","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-c-extract_host","()",""],["extract_lambda_or","Picky::Backends::Backend","classes/Picky/Backends/Backend.html#method-i-extract_lambda_or","(thing, *args)",""],["extract_qualifiers_from","Picky::Category","classes/Picky/Category.html#method-i-extract_qualifiers_from","(options)","<p>Extract qualifiers from the options.\n"],["extract_source","Picky::Category","classes/Picky/Category.html#method-i-extract_source","()","<p>Extract the actual source if it is wrapped in a time capsule, i.e. a\nblock/lambda.\n<p>TODO Extract into module. …\n"],["extract_source","Picky::Index","classes/Picky/Index.html#method-i-extract_source","()","<p>Extract the actual source if it is wrapped in a time capsule, i.e. a\nblock/lambda.\n<p>TODO Extract into module. …\n"],["extracted","Picky::Adapters::Rack::Search","classes/Picky/Adapters/Rack/Search.html#method-i-extracted","(params)",""],["from","Picky::Category","classes/Picky/Category.html#method-i-from","()","<p>Where the data is taken from.\n"],["from","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-from","()","<p>Delegator to generator#from.\n"],["from","Picky::Results","classes/Picky/Results.html#method-c-from","(query, amount, offset, allocations)","<p>Create new results and calculate the ids.\n"],["generate_caches_from_memory","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-generate_caches_from_memory","()",""],["generate_for","Picky::Generators::Partial::Infix","classes/Picky/Generators/Partial/Infix.html#method-i-generate_for","(token, inverted, result)","<p>To each shortened token of :test :test, :tes, :te, :t add all ids of :test\n<p>“token” here means …\n"],["generate_for","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-generate_for","(token, inverted, result)","<p>To each shortened token of :test :test, :tes, :te, :t add all ids of :test\n<p>“token” here means …\n"],["generate_from","Picky::Generators::Partial::Infix","classes/Picky/Generators/Partial/Infix.html#method-i-generate_from","(inverted)","<p>Generates a partial index from the given inverted index.\n"],["generate_from","Picky::Generators::Partial::None","classes/Picky/Generators/Partial/None.html#method-i-generate_from","(index)","<p>Returns an empty index.\n"],["generate_from","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-generate_from","(inverted)","<p>Generates a partial index from the given inverted index.\n"],["generate_from","Picky::Generators::Similarity::None","classes/Picky/Generators/Similarity/None.html#method-i-generate_from","(index)","<p>Returns an empty index.\n"],["generate_from","Picky::Generators::Similarity::Phonetic","classes/Picky/Generators/Similarity/Phonetic.html#method-i-generate_from","(inverted)","<p>Generates an index for the given index (in exact index style).\n<p>In the following form:\n<p>:meier, :mueller, … &mdash; "],["generate_from","Picky::Generators::Weights::Logarithmic","classes/Picky/Generators/Weights/Logarithmic.html#method-i-generate_from","(inverted)","<p>Generates a partial index from the given inverted index.\n"],["generate_intermediate_result_id","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-generate_intermediate_result_id","()","<p>Use the host and pid (generated lazily in child processes) for the result.\n"],["generate_partial_from","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-generate_partial_from","(arg;)",""],["harakiri","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-harakiri","()","<p>Kills itself, but still answering the request honorably.\n"],["harakiri","Picky::Rack::Harakiri","classes/Picky/Rack/Harakiri.html#method-i-harakiri","()","<p>Checks to see if it is time to honorably retire.\n<p>If yes, kills itself (Unicorn will answer the request, …\n"],["harakiri?","Picky::Rack::Harakiri","classes/Picky/Rack/Harakiri.html#method-i-harakiri-3F","()","<p>Is it time to honorably retire?\n"],["harvest","Picky::Sources::CSV","classes/Picky/Sources/CSV.html#method-i-harvest","(category)","<p>Harvests the data to index.\n"],["harvest","Picky::Sources::Couch","classes/Picky/Sources/Couch.html#method-i-harvest","(category)",""],["harvest","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-harvest","(category, &block)","<p>Harvests the data to index in chunks.\n"],["harvest","Picky::Sources::Delicious","classes/Picky/Sources/Delicious.html#method-i-harvest","(category)","<p>Harvests the data to index.\n"],["harvest","Picky::Sources::Mongo","classes/Picky/Sources/Mongo.html#method-i-harvest","(category)","<p>Fetches the data, @limit=0 will return all records\n<p>Limit is set to 0 by default - all collection entries …\n"],["harvest_statement","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-harvest_statement","(category)","<p>The harvest statement used to pull data from the snapshot table.\n"],["harvest_statement_with_offset","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-harvest_statement_with_offset","(category, offset)","<p>Builds a harvest statement for getting data to index.\n"],["hashify","Picky::Generators::Similarity::Phonetic","classes/Picky/Generators/Similarity/Phonetic.html#method-i-hashify","(list)","<p>Hashifies a list of symbols.\n<p>Where: { encoded_sym =&gt; [syms] }\n"],["host","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-host","()",""],["identifier","Picky::Bundle","classes/Picky/Bundle.html#method-i-identifier","()",""],["identifier","Picky::Category","classes/Picky/Category.html#method-i-identifier","()","<p>Identifier for technical output.\n"],["identifier","Picky::Index","classes/Picky/Index.html#method-i-identifier","()","<p>Identifier used for technical output.\n"],["identifier","Picky::Indexes","classes/Picky/Indexes.html#method-c-identifier","()",""],["ids","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-ids","(combinations, _, _)","<p>Currently, the loaded ids are intersected using the fast C-based\nintersection.\n<p>However, if we could come …\n"],["ids","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-ids","(combinations, _, _)","<p>Returns the result ids for the allocation.\n<p>Sorts the ids by size and &amp; through them in the following …\n"],["ids","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-ids","(combinations, amount, offset)","<p>Returns the result ids for the allocation.\n<p>Developers wanting to program fast intersection routines, can …\n"],["ids","Picky::Bundle","classes/Picky/Bundle.html#method-i-ids","(sym)","<p>Get the ids for the given symbol.\n<p>Returns a (potentially empty) array of ids.\n"],["ids","Picky::Category","classes/Picky/Category.html#method-i-ids","(token)","<p>Gets the ids for this token’s text.\n"],["ids","Picky::Results","classes/Picky/Results.html#method-i-ids","(amount = 20)","<p>Delegates to allocations.\n"],["ids","Picky::Wrappers::Bundle::Calculation","classes/Picky/Wrappers/Bundle/Calculation.html#method-i-ids","(float_str)","<p>TODO Symbols.\n"],["ids","Picky::Wrappers::Category::ExactFirst","classes/Picky/Wrappers/Category/ExactFirst.html#method-i-ids","(text)",""],["ignore","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-ignore","(*qualifiers)","<p>Ignore the categories with these qualifiers.\n<p>Example:\n\n<pre>search = Search.new(index1, index2, index3) do\n  ...</pre>\n"],["ignore_unassigned_tokens","Picky::Search","classes/Picky/Search.html#method-i-ignore_unassigned_tokens","(value)","<p>Ignore the given token if it cannot be matched to a category. The default\nbehaviour is that if a token …\n"],["index","Picky::Category","classes/Picky/Category.html#method-i-index","()","<p>Prepares and caches this category.\n<p>This one should be used by users.\n"],["index","Picky::Index","classes/Picky/Index.html#method-i-index","()","<p>Calling index on an index will call index on every category.\n<p>Decides whether to use a parallel indexer …\n"],["index","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-i-index","(categories)","<p>Starts the indexing process.\n"],["index","Picky::Indexes","classes/Picky/Indexes.html#method-i-index","(randomly = true)","<p>Runs the indexers in parallel (prepare + cache).\n"],["index","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-index","()",""],["index_default","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-index_default","()",""],["index_default=","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-index_default-3D","(new_default)",""],["index_directory","Picky::Category","classes/Picky/Category.html#method-i-index_directory","()","<p>The index directory for this category.\n<p>TODO Push down into files? Yes.\n"],["index_for_tests","Picky::Indexes","classes/Picky/Indexes.html#method-i-index_for_tests","()","<p>For integration testing – indexes for the tests without forking and\nshouting ;)\n<p>TODO Rename to #index_without_forking …\n"],["index_in_parallel","Picky::Index","classes/Picky/Index.html#method-i-index_in_parallel","()","<p>Indexes the categories in parallel.\n<p>Only use where the category does have a #each source defined.\n"],["index_name","Picky::Category","classes/Picky/Category.html#method-i-index_name","()","<p>Index name.\n"],["index_path","Picky::Bundle","classes/Picky/Bundle.html#method-i-index_path","(type = nil)","<p>Path and partial filename of a specific subindex.\n<p>Subindexes are:\n\n<pre>* inverted index\n* weights index\n* partial ...</pre>\n"],["indexer","Picky::Category","classes/Picky/Category.html#method-i-indexer","()","<p>The indexer is lazily generated and cached.\n"],["indexing","Picky::Application","classes/Picky/Application.html#method-c-indexing","(options = {})","<p>Returns a configured tokenizer that is used for indexing by default.\n"],["indexing","Picky::Index","classes/Picky/Index.html#method-i-indexing","(options = {})","<p>Define an index tokenizer on the index.\n<p>Parameters are the exact same as for indexing.\n"],["indexing","Picky::Sinatra","classes/Picky/Sinatra.html#method-i-indexing","(options)","<p>Delegates to Application.\n"],["initial","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-initial","()","<p>The initial content before loading.\n<p>Note: We could also load the mapping file\n\n<pre>as in #load.</pre>\n"],["initial","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-initial","()","<p>The initial content before loading from file.\n"],["initial","Picky::Backends::Memory::Text","classes/Picky/Backends/Memory/Text.html#method-i-initial","()","<p>The initial content before loading.\n"],["initial","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-initial","()","<p>The initial content before loading.\n<p>Note: As Redis indexes needn’t be loaded per se,\n\n<pre>this just returns ...</pre>\n"],["inject_possible_for","Picky::Categories","classes/Picky/Categories.html#method-i-inject_possible_for","(tokens)",""],["instance","Picky::Indexes","classes/Picky/Indexes.html#method-c-instance","()","<p>Return the Indexes instance.\n"],["key_format","Picky::Bundle","classes/Picky/Bundle.html#method-i-key_format","()","<p>If a key format is set, use it, else delegate to the category.\n"],["key_format","Picky::Category","classes/Picky/Category.html#method-i-key_format","()","<p>Return the key format.\n<p>If no key_format is defined on the category and the source has no key\nformat, ask …\n"],["key_format","Picky::Index","classes/Picky/Index.html#method-i-key_format","(format = nil)","<p>Define a key_format on the index.\n<p>Parameter is a method name to use on the key (e.g. :to_i, :to_s, :strip). …\n"],["kill_each_worker_except","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-kill_each_worker_except","(pid)","<p>Taken from Unicorn.\n"],["kill_worker","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-kill_worker","(signal, wpid)",""],["load","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-load","()","<p>Loads the mapping hash from json format.\n"],["load","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-load","()","<p>Loads the index hash from json format.\n"],["load","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-load","()","<p>Loads the index hash from marshal format.\n"],["load","Picky::Backends::Memory::Text","classes/Picky/Backends/Memory/Text.html#method-i-load","()","<p>Text files are used exclusively for prepared data files.\n"],["load","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-load","()","<p>Returns itself.\n"],["load","Picky::Bundle","classes/Picky/Bundle.html#method-i-load","()","<p>Loads all indexes.\n<p>Loading loads index objects from the backend. They should each respond to\n[] and return …\n"],["load","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-load","()",""],["load","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-load","()","<p>Load first the bundle, then extract the config.\n"],["load_configuration","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_configuration","()","<p>Loads the configuration.\n"],["load_from_cache","Picky::Category","classes/Picky/Category.html#method-i-load_from_cache","()","<p>Loads the index from cache.\n"],["load_inverted","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_inverted","()","<p>Loads the core index.\n"],["load_similarity","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_similarity","()","<p>Loads the similarity index.\n"],["load_weights","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_weights","()","<p>Loads the weights index.\n"],["log_type","Picky::Results","classes/Picky/Results.html#method-i-log_type","()","<p>The first character in the blog designates what type of query it is.\n<p>No calculated ids means: No results. …\n"],["map_categories","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-map_categories","()",""],["maximum_tokens","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-maximum_tokens","(amount)",""],["memory_efficient_intersect","Performant::Array","classes/Performant/Array.html#method-c-memory_efficient_intersect","(p1)",""],["new","Picky::Adapters::Rack::LiveParameters","classes/Picky/Adapters/Rack/LiveParameters.html#method-c-new","(live_parameters)",""],["new","Picky::Adapters::Rack::Search","classes/Picky/Adapters/Rack/Search.html#method-c-new","(query)",""],["new","Picky::Backends::Backend","classes/Picky/Backends/Backend.html#method-c-new","(options = {})",""],["new","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-c-new","(cache_path, options = {})","<p>An index cache takes a path, without file extension, which will be provided\nby the subclasses.\n"],["new","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-c-new","(cache_path, options = {})","<p>An index cache takes a path, without file extension, which will be provided\nby the subclasses.\n"],["new","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-c-new","(options = {})",""],["new","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-c-new","(client, namespace, options = {})","<p>An index cache takes a path, without file extension, which will be provided\nby the subclasses.\n"],["new","Picky::Bundle","classes/Picky/Bundle.html#method-c-new","(name, category, backend, weights_strategy, partial_strategy, similarity_strategy, options = {})",""],["new","Picky::Categories","classes/Picky/Categories.html#method-c-new","(options = {})","<p>A list of indexed categories.\n"],["new","Picky::Category","classes/Picky/Category.html#method-c-new","(name, index, options = {})","<p>Mandatory params:\n\n<pre>* name: Category name to use as identifier and file names.\n* index: Index to which this ...</pre>\n"],["new","Picky::Generators::Partial::Infix","classes/Picky/Generators/Partial/Infix.html#method-c-new","(options = {})","<p>The min option signifies with what size it will start in generating the\ninfix tokens.\n<p>Examples:\n<p>With :hello, …\n"],["new","Picky::Generators::Partial::Postfix","classes/Picky/Generators/Partial/Postfix.html#method-c-new","(options = {})","<p>The from option signifies where in the symbol it will start in generating\nthe subtokens.\n<p>Examples:\n<p>With …\n"],["new","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-c-new","(options = {})","<p>The from option signifies where in the symbol it will start in generating\nthe subtokens.\n<p>Examples:\n<p>With …\n"],["new","Picky::Generators::Partial::SubstringGenerator","classes/Picky/Generators/Partial/SubstringGenerator.html#method-c-new","(from, to)",""],["new","Picky::Generators::Similarity::Phonetic","classes/Picky/Generators/Similarity/Phonetic.html#method-c-new","(amount = 10)",""],["new","Picky::Index","classes/Picky/Index.html#method-c-new","(name)","<p>Create a new index with a given source.\n<p>Parameters\n<p>name: A name that will be used for the index directory …\n"],["new","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-c-new","(index_or_category)",""],["new","Picky::Indexes","classes/Picky/Indexes.html#method-c-new","()",""],["new","Picky::Indexes::Memory","classes/Picky/Indexes/Memory.html#method-c-new","(*)",""],["new","Picky::Indexes::Redis","classes/Picky/Indexes/Redis.html#method-c-new","(*)",""],["new","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-c-new","()",""],["new","Picky::Interfaces::LiveParameters::CouldNotUpdateConfigurationError","classes/Picky/Interfaces/LiveParameters/CouldNotUpdateConfigurationError.html#method-c-new","(config_key, message)",""],["new","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-c-new","(*indexes)","<p>Creates a new Query::Indexes.\n<p>Its job is to generate all possible combinations. Note: We cannot mix\nmemory …\n"],["new","Picky::Query::Weights","classes/Picky/Query/Weights.html#method-c-new","(weights = {})","<p>Needs a Hash of\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">category_name1</span>, :<span class=\"ruby-identifier\">category_name2</span>] =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">+3</span>\n</pre>\n<p>(some positive or negative weight)\n"],["new","Picky::Rack::Harakiri","classes/Picky/Rack/Harakiri.html#method-c-new","(app)",""],["new","Picky::Results","classes/Picky/Results.html#method-c-new","(query = nil, amount = 0, offset = 0, allocations = Query::Allocations.new)","<p>Takes instances of Query::Allocations as param.\n"],["new","Picky::Search","classes/Picky/Search.html#method-c-new","(*index_definitions)","<p>Takes:\n<p>A number of indexes\n\n<p>TODO Add reduce_allocations_to_amount (rename).\n"],["new","Picky::Sources::CSV","classes/Picky/Sources/CSV.html#method-c-new","(*category_names, options)",""],["new","Picky::Sources::Couch","classes/Picky/Sources/Couch.html#method-c-new","(*category_names, options)",""],["new","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-c-new","(select_statement, options = { file: 'app/db.yml' })",""],["new","Picky::Sources::Delicious","classes/Picky/Sources/Delicious.html#method-c-new","(username, password)",""],["new","Picky::Sources::Mongo","classes/Picky/Sources/Mongo.html#method-c-new","(*category_names, options)",""],["new","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-new","(options = {})",""],["new","Picky::Tokenizers::Location","classes/Picky/Tokenizers/Location.html#method-c-new","(options = {})",""],["new","Picky::Try","classes/Picky/Try.html#method-c-new","(text, index = nil, category = nil)",""],["new","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-c-new","(bundle)",""],["new","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-c-new","(bundle, options = {})",""],["new","Picky::Wrappers::Bundle::Wrapper","classes/Picky/Wrappers/Bundle/Wrapper.html#method-c-new","(bundle)",""],["new","Picky::Wrappers::Category::ExactFirst","classes/Picky/Wrappers/Category/ExactFirst.html#method-c-new","(category)",""],["normalize_with_patterns","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-normalize_with_patterns","(text)",""],["normalize_with_patterns?","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-normalize_with_patterns-3F","()",""],["normalizes_words","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-normalizes_words","(regexp_replaces)","<p>Normalizing.\n<p>We only allow arrays.\n"],["notify_finished","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-i-notify_finished","(file)",""],["open","Picky::Backends::Memory::Text","classes/Picky/Backends/Memory/Text.html#method-i-open","(&block)",""],["output","Picky::Try","classes/Picky/Try.html#method-i-output","()",""],["parameters","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-parameters","(configuration_hash)","<p>Updates any parameters with the ones given and returns the updated params.\n<p>The params are a strictly defined …\n"],["pid","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-pid","()",""],["possible_categories","Picky::Categories","classes/Picky/Categories.html#method-i-possible_categories","(token)","<p>This returns the possible categories for this token. If the user has\nalready preselected a category for …\n"],["possible_combinations","Picky::Categories","classes/Picky/Categories.html#method-i-possible_combinations","(token)","<p>Return all possible combinations for the given token.\n<p>This checks if it needs to also search through similar …\n"],["possible_for","Picky::Categories","classes/Picky/Categories.html#method-i-possible_for","(token, preselected_categories = nil)","<p>Returns possible Combinations for the token.\n<p>Note: The preselected_categories param is an optimization. …\n"],["prepare","Picky::Category","classes/Picky/Category.html#method-i-prepare","()","<p>Indexes, creates the “prepared_…” file.\n"],["prepare!","Picky::Results","classes/Picky/Results.html#method-i-prepare-21","()","<p>This starts the actual processing.\n<p>Without this, the allocations are not processed, and no ids are calculated.\n…\n"],["prepare_backup","Picky::Backends::Helpers::File","classes/Picky/Backends/Helpers/File.html#method-i-prepare_backup","(target)","<p>Prepares the backup directory for the file.\n"],["prepared_allocations_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-prepared_allocations_for","(tokens, weights = {})","<p>Returns a number of prepared (sorted, reduced etc.) allocations for the\ngiven tokens.\n"],["prepared_index_file","Picky::Category","classes/Picky/Category.html#method-i-prepared_index_file","(&block)","<p>Get an opened index file.\n<p>Note: If you don’t use it with the block, do not forget to close it.\n"],["prepared_index_path","Picky::Category","classes/Picky/Category.html#method-i-prepared_index_path","()","<p>Path and partial filename of the prepared index on this category.\n"],["preprocess","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-preprocess","(text)","<p>Default preprocessing hook.\n<p>Does:\n<p>Character substitution.\n"],["pretokenize","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-pretokenize","(text)","<p>Pretokenizing.\n<p>Does:\n\n<pre>* Split the text into words.\n* Cap the amount of tokens if maximum_tokens is set.</pre>\n"],["process","Picky::Indexers::Parallel","classes/Picky/Indexers/Parallel.html#method-i-process","(categories)","<p>Process does the actual indexing.\n<p>Parameters:\n\n<pre>* categories: An Enumerable of Category-s.</pre>\n"],["process","Picky::Indexers::Serial","classes/Picky/Indexers/Serial.html#method-i-process","(categories)","<p>Harvest the data from the source, tokenize, and write to an intermediate\n“prepared index” file. …\n"],["qualifiers","Picky::Category","classes/Picky/Category.html#method-i-qualifiers","()","<p>Returns the qualifiers if set or just the name if not.\n"],["query_default","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-query_default","()",""],["query_default=","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-query_default-3D","(new_default)",""],["querying_removes_characters","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-querying_removes_characters","()","<p>TODO Move to Interface object.\n"],["querying_removes_characters=","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-querying_removes_characters-3D","(new_value)",""],["querying_splits_text_on","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-querying_splits_text_on","()",""],["querying_splits_text_on=","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-querying_splits_text_on-3D","(new_value)",""],["querying_stopwords","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-querying_stopwords","()",""],["querying_stopwords=","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-querying_stopwords-3D","(new_value)",""],["raise_cache_missing","Picky::Bundle","classes/Picky/Bundle.html#method-i-raise_cache_missing","(what)","<p>Raises an appropriate error message for the given cache.\n"],["raise_not_found","Picky::Categories","classes/Picky/Categories.html#method-i-raise_not_found","(category_name)",""],["raise_not_found","Picky::Indexes","classes/Picky/Indexes.html#method-i-raise_not_found","(index_name)","<p>Raises a not found for the index.\n"],["raise_unless_cache_exists","Picky::Bundle","classes/Picky/Bundle.html#method-i-raise_unless_cache_exists","()","<p>Alerts the user if an index is missing.\n"],["raise_unless_index_exists","Picky::Bundle","classes/Picky/Bundle.html#method-i-raise_unless_index_exists","()","<p>Alerts the user if one of the necessary indexes (core, weights) is missing.\n"],["raise_unless_index_ok","Picky::Bundle","classes/Picky/Bundle.html#method-i-raise_unless_index_ok","()","<p>Alerts the user if the core or weights indexes are not there.\n"],["raise_unless_similarity_exists","Picky::Bundle","classes/Picky/Bundle.html#method-i-raise_unless_similarity_exists","()","<p>Alerts the user if the similarity index is missing (given that it’s used).\n"],["raise_unless_similarity_ok","Picky::Bundle","classes/Picky/Bundle.html#method-i-raise_unless_similarity_ok","()","<p>Alerts the user if the similarity index is not there.\n"],["ranged_category","Picky::Index","classes/Picky/Index.html#method-i-ranged_category","(category_name, range, options = {})","<p>Make this category range searchable with a fixed range. If you need other\nranges, define another category …\n"],["redis_version","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-redis_version","()","<p>Returns an array describing the current Redis version.\n<p>Note: This method assumes that clients answer\n\n<pre>to ...</pre>\n"],["redis_with_scripting?","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-redis_with_scripting-3F","()","<p>Does the Redis version already include scripting support?\n"],["register","Picky::Indexes","classes/Picky/Indexes.html#method-i-register","(index)","<p>Registers an index with the indexes.\n"],["register","Picky::Indexes","classes/Picky/Indexes.html#method-c-register","(index)",""],["reindex","Picky::Category","classes/Picky/Category.html#method-i-reindex","()","<p>Indexes and reloads the category.\n"],["reject","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-reject","(tokens)",""],["rejects_token_if","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-rejects_token_if","(&condition)","<p>Reject tokens after tokenizing based on the given criteria.\n"],["reload","Picky::Application","classes/Picky/Application.html#method-c-reload","()","<p>Reloads &amp; finalizes the apps.\n"],["reload","Picky::Category","classes/Picky/Category.html#method-i-reload","()",""],["remove","Picky::Bundle","classes/Picky/Bundle.html#method-i-remove","(id)","<p>Removes the given id from the indexes.\n"],["remove","Picky::Category","classes/Picky/Category.html#method-i-remove","(id)","<p>Removes an indexed object with the given id.\n"],["remove_illegals","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-remove_illegals","(text)",""],["remove_non_single_stopwords","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-remove_non_single_stopwords","(text)",""],["remove_stopwords","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-remove_stopwords","(text)",""],["remove_worker","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-remove_worker","(wpid)","<p>TODO This needs to be Webserver agnostic.\n"],["removes_characters","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-removes_characters","(regexp)","<p>Illegals.\n<p>We only allow regexps (even if string would be okay too for gsub! - it’s\ntoo hard to understand) …\n"],["replace","Picky::Category","classes/Picky/Category.html#method-i-replace","(object, where = :unshift)","<p>Removes the object’s id, and then adds it again.\n"],["reset_rack_adapter","Picky::Application","classes/Picky/Application.html#method-c-reset_rack_adapter","()",""],["respond_with","Picky::Adapters::Rack::Base","classes/Picky/Adapters/Rack/Base.html#method-i-respond_with","(response, content_type = 'application/json')","<p>Puts together an appropriately structured Rack response.\n<p>Note: Bytesize is needed to have special characters …\n"],["restore","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-restore","()","<p>Copies the file from its backup location back to the original location.\n"],["restore","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-restore","()","<p>Copies the file from its backup location back to the original location.\n"],["restore","Picky::Bundle","classes/Picky/Bundle.html#method-i-restore","()","<p>Restores the indexes from the “backup” directory.\n"],["restore","Picky::Category","classes/Picky/Category.html#method-i-restore","()","<p>Restore the caches. (Revert with backup_caches)\n"],["result_identifier","Picky::Index","classes/Picky/Index.html#method-i-result_identifier","(result_identifier = nil)","<p>Define how the results of this index are identified. (Shown in the client,\nfor example)\n<p>Default is the …\n"],["retrieve","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-retrieve","()","<p>A json file does not provide retrieve functionality.\n"],["retrieve","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-retrieve","()","<p>A json file does not provide retrieve functionality.\n"],["retrieve","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-retrieve","()","<p>A marshal file does not provide retrieve functionality.\n"],["retrieve","Picky::Backends::Memory::Text","classes/Picky/Backends/Memory/Text.html#method-i-retrieve","()","<p>Retrieves prepared index data in the form\n<p>id,datan\n<p>id,datan\n"],["retrieve","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-retrieve","()","<p>We do not use Redis to retrieve data.\n"],["retrieve","Picky::Category","classes/Picky/Category.html#method-i-retrieve","()","<p>Retrieves the prepared index data into the indexes and generates the\nnecessary derived indexes.\n"],["route","Picky::Application","classes/Picky/Application.html#method-c-route","(options)","<p>Routes.\n"],["saved","Picky::Try","classes/Picky/Try.html#method-i-saved","()",""],["saved?","Picky::Generators::Partial::None","classes/Picky/Generators/Partial/None.html#method-i-saved-3F","()","<p>Returns if this strategy’s generated file is saved.\n"],["saved?","Picky::Generators::Similarity::None","classes/Picky/Generators/Similarity/None.html#method-i-saved-3F","()","<p>Returns if this strategy’s generated file is saved.\n"],["saved?","Picky::Generators::Strategy","classes/Picky/Generators/Strategy.html#method-i-saved-3F","()","<p>By default, all caches are saved in a storage (like a file).\n<p>TODO Move to the backends?\n"],["score_for","Picky::Query::Weights","classes/Picky/Query/Weights.html#method-i-score_for","(combinations)","<p>API.\n<p>Calculates a score for the combinations. Implement\n#weight_for(category_names) if you don’t need …\n"],["search","Picky::Search","classes/Picky/Search.html#method-i-search","(text, ids = 20, offset = 0)","<p>This is the main entry point for a query. Use this in specs and also for\nrunning queries.\n<p>Parameters: …\n"],["search_with","Picky::Search","classes/Picky/Search.html#method-i-search_with","(tokens, ids = 20, offset = 0, original_text = nil)","<p>Runs the actual search using Query::Tokens.\n<p>Note: Internal method, use #search to search.\n"],["searched","Picky::Try","classes/Picky/Try.html#method-i-searched","()",""],["searching","Picky::Application","classes/Picky/Application.html#method-c-searching","(options = {})","<p>Returns a configured tokenizer that is used for querying by default.\n"],["searching","Picky::Search","classes/Picky/Search.html#method-i-searching","(options)","<p>Examples:\n\n<pre>search = Search.new(index1, index2, index3) do\n  searching removes_characters: /[^a-z]/,\n   ...</pre>\n"],["searching","Picky::Sinatra","classes/Picky/Sinatra.html#method-i-searching","(options)","<p>Delegates to Application.\n"],["similar","Picky::Bundle","classes/Picky/Bundle.html#method-i-similar","(text)","<p>Get a list of similar texts.\n<p>Note: Does not return itself.\n"],["similar_possible_for","Picky::Categories","classes/Picky/Categories.html#method-i-similar_possible_for","(token)","<p>Gets all similar tokens and puts together the possible combinations for\neach found similar token.\n"],["similar_tokens_for","Picky::Categories","classes/Picky/Categories.html#method-i-similar_tokens_for","(token)","<p>Returns all possible similar tokens for the given token.\n"],["size","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-size","()","<p>Extracts the size of the file in Bytes.\n<p>Note: This is a very forgiving implementation.\n\n<pre>But as long as Redis ...</pre>\n"],["size_of","Picky::Backends::Helpers::File","classes/Picky/Backends/Helpers/File.html#method-i-size_of","(path)","<p>Extracts the size of the file in Bytes.\n"],["snapshot_table_name","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-snapshot_table_name","(index_name)","<p>The name of the snapshot table created by Picky.\n"],["sort","Picky::Generators::Similarity::Phonetic","classes/Picky/Generators/Similarity/Phonetic.html#method-i-sort","(hash)","<p>Sorts the index values in place.\n"],["source","Picky::Category","classes/Picky/Category.html#method-i-source","()","<p>Return an appropriate source.\n<p>If we have no explicit source, we’ll check the index for one.\n"],["source","Picky::Index","classes/Picky/Index.html#method-i-source","(some_source = nil, &block)","<p>Define a source on the index.\n<p>Parameter is a source, either one of the standard sources or anything\nresponding …\n"],["split","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-split","(text)",""],["splits_text_on","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-splits_text_on","(regexp_or_string)","<p>Splitting.\n<p>We allow Strings and Regexps. Note: We do not test against to_str since\nsymbols do not work …\n"],["start_master_process_thread","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-start_master_process_thread","()","<p>This runs a thread that listens to child processes.\n"],["stopwords","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-stopwords","(regexp)","<p>Stopwords.\n<p>We only allow regexps (even if string would be okay too for gsub! - it’s\ntoo hard to understand) …\n"],["substitute","Picky::CharacterSubstituters::WestEuropean","classes/Picky/CharacterSubstituters/WestEuropean.html#method-i-substitute","(text)","<p>Substitutes occurrences of certain characters (like Umlauts) with ASCII\nrepresentations of them.\n<p>Examples: …\n"],["substitute_characters","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-substitute_characters","(text)",""],["substitutes_characters_with","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-substitutes_characters_with","(substituter = CharacterSubstituters::WestEuropean.new)","<p>Substitute Characters with this substituter.\n<p>Default is European Character substitution.\n"],["take_snapshot","Picky::Sources::Base","classes/Picky/Sources/Base.html#method-i-take_snapshot","(index)","<p>Used to take a snapshot of your data if it is fast changing.\n<p>Called once for each index before harvesting. …\n"],["take_snapshot","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-take_snapshot","(index)","<p>Take a snapshot of the data.\n<p>Uses CREATE TABLE AS with the given SELECT statement to create a snapshot …\n"],["timed","Picky::Helpers::Measuring","classes/Picky/Helpers/Measuring.html#method-i-timed","(*args, &block)","<p>Returns a duration in seconds.\n"],["to","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-to","()","<p>Delegator to generator#to.\n"],["to_app","Picky::Adapters::Rack::LiveParameters","classes/Picky/Adapters/Rack/LiveParameters.html#method-i-to_app","(options = {})",""],["to_app","Picky::Adapters::Rack::Search","classes/Picky/Adapters/Rack/Search.html#method-i-to_app","(options = {})",""],["to_hash","Picky::Results","classes/Picky/Results.html#method-i-to_hash","()","<p>Returns a hash with the allocations, offset, duration and total.\n"],["to_json","Picky::Results","classes/Picky/Results.html#method-i-to_json","(options = {})","<p>Convert to json format.\n"],["to_routes","Picky::Application","classes/Picky/Application.html#method-c-to_routes","()",""],["to_s","Picky::Backends::Backend","classes/Picky/Backends/Backend.html#method-i-to_s","()",""],["to_s","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-to_s","()",""],["to_s","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-to_s","()",""],["to_s","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-to_s","()",""],["to_s","Picky::Bundle","classes/Picky/Bundle.html#method-i-to_s","()",""],["to_s","Picky::Categories","classes/Picky/Categories.html#method-i-to_s","()",""],["to_s","Picky::Category","classes/Picky/Category.html#method-i-to_s","()",""],["to_s","Picky::Index","classes/Picky/Index.html#method-i-to_s","()",""],["to_s","Picky::Indexes","classes/Picky/Indexes.html#method-i-to_s","()",""],["to_s","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-to_s","()",""],["to_s","Picky::Query::Weights","classes/Picky/Query/Weights.html#method-i-to_s","()","<p>Prints out a nice representation of the configured weights.\n"],["to_s","Picky::Results","classes/Picky/Results.html#method-i-to_s","()","<p>For logging.\n"],["to_s","Picky::Search","classes/Picky/Search.html#method-i-to_s","()","<p>Display some nice information for the user.\n"],["to_s","Picky::Sources::CSV","classes/Picky/Sources/CSV.html#method-i-to_s","()",""],["to_s","Picky::Sources::Couch","classes/Picky/Sources/Couch.html#method-i-to_s","()",""],["to_s","Picky::Sources::DB","classes/Picky/Sources/DB.html#method-i-to_s","()",""],["to_s","Picky::Sources::Delicious","classes/Picky/Sources/Delicious.html#method-i-to_s","()",""],["to_s","Picky::Sources::Mongo","classes/Picky/Sources/Mongo.html#method-i-to_s","()",""],["to_s","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-to_s","()",""],["to_stats","Picky::Application","classes/Picky/Application.html#method-c-to_stats","()",""],["to_stdout","Picky::Try","classes/Picky/Try.html#method-i-to_stdout","()",""],["tokenize","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-tokenize","(text)","<p>Returns a number of tokens, generated from the given text, based on the\nparameters given.\n<p>Returns:\n\n<pre>[[:token1, ...</pre>\n"],["tokenize","Picky::Tokenizers::Location","classes/Picky/Tokenizers/Location.html#method-i-tokenize","(text)",""],["tokenized","Picky::Search","classes/Picky/Search.html#method-i-tokenized","(text)","<p>Delegates the tokenizing to the query tokenizer.\n<p>Parameters:\n<p>text: The string to tokenize.\n"],["tokenizer","Picky::Category","classes/Picky/Category.html#method-i-tokenizer","()","<p>Returns an appropriate tokenizer. If one isn’t set on this category, will\ntry the index, and finally …\n"],["tokenizer","Picky::Index","classes/Picky/Index.html#method-i-tokenizer","()","<p>Returns the installed tokenizer or the default.\n"],["tokenizer","Picky::Indexes","classes/Picky/Indexes.html#method-i-tokenizer","()",""],["tokenizer","Picky::Wrappers::Category::Location","classes/Picky/Wrappers/Category/Location.html#method-i-tokenizer","()","<p>Uses a basic tokenizer.\n"],["tokens_for","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-tokens_for","(words)","<p>Downcases.\n"],["total","Picky::Results","classes/Picky/Results.html#method-i-total","()","<p>The total results. Delegates to the allocations.\n"],["try_updating_configuration_with","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-try_updating_configuration_with","(configuration_hash)","<p>Tries updating the configuration in the child process or parent process.\n"],["use_exact_for_partial?","Picky::Generators::Partial::None","classes/Picky/Generators/Partial/None.html#method-i-use_exact_for_partial-3F","()","<p>Do not use the partial bundle for getting ids and weights.\n"],["use_exact_for_partial?","Picky::Generators::Partial::Strategy","classes/Picky/Generators/Partial/Strategy.html#method-i-use_exact_for_partial-3F","()","<p>Defines whether to use the exact bundle instead of the partial one.\n<p>Default is @false@.\n<p>For example:\n"],["warn_cache_small","Picky::Bundle","classes/Picky/Bundle.html#method-i-warn_cache_small","(what)","<p>Outputs a warning for the given cache.\n"],["warn_if_index_small","Picky::Bundle","classes/Picky/Bundle.html#method-i-warn_if_index_small","()","<p>Warns the user if the core or weights indexes are small.\n"],["warn_if_similarity_small","Picky::Bundle","classes/Picky/Bundle.html#method-i-warn_if_similarity_small","()","<p>Warns the user if the similarity index is small.\n"],["warn_no_source","Picky::Index","classes/Picky/Index.html#method-i-warn_no_source","()",""],["weight","Picky::Bundle","classes/Picky/Bundle.html#method-i-weight","(sym)","<p>Get a weight for the given symbol.\n<p>Returns a number, or nil.\n"],["weight","Picky::Category","classes/Picky/Category.html#method-i-weight","(token)","<p>Gets the weight for this token’s text.\n"],["weight","Picky::Wrappers::Bundle::Calculation","classes/Picky/Wrappers/Bundle/Calculation.html#method-i-weight","(float_str)","<p>TODO Symbols.\n"],["weight","Picky::Wrappers::Category::ExactFirst","classes/Picky/Wrappers/Category/ExactFirst.html#method-i-weight","(text)",""],["weight_for","Picky::Generators::Weights::Logarithmic","classes/Picky/Generators/Weights/Logarithmic.html#method-i-weight_for","(amount)","<p>Sets the weight value.\n<p>If the size is 0 or one, we would get -Infinity or 0.0. Thus we do not set\na value …\n"],["weight_for","Picky::Query::Weights","classes/Picky/Query/Weights.html#method-i-weight_for","(category_names)","<p>API.\n<p>Get the weight for an array of category names.\n<p>Example:\n"],["with_data_snapshot","Picky::Category","classes/Picky/Category.html#method-i-with_data_snapshot","()","<p>Take a data snapshot if the source offers it.\n"],["with_data_snapshot","Picky::Index","classes/Picky/Index.html#method-i-with_data_snapshot","()","<p>Note: Duplicated in category_indexing.rb.\n<p>Take a data snapshot if the source offers it.\n"],["with_snapshot","Picky::Sources::Base","classes/Picky/Sources/Base.html#method-i-with_snapshot","(index)","<p>Used to check if a snapshot has been done already.\n<p>Example:\n<p>In a DB source, a table based on the source’s …\n"],["worker_pids","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-worker_pids","()","<p>TODO This needs to be webserver agnostic.\n"],["wrap","Picky::Wrappers::Category::ExactFirst","classes/Picky/Wrappers/Category/ExactFirst.html#method-c-wrap","(index_or_category)",""],["wrap","Picky::Wrappers::Category::Location","classes/Picky/Wrappers/Category/Location.html#method-c-wrap","(category, grid, precision = 1, anchor = 0.0)","<p>THINK Is this the best way to do this?\n"],["wrap_each_of","Picky::Wrappers::Category::ExactFirst","classes/Picky/Wrappers/Category/ExactFirst.html#method-c-wrap_each_of","(categories)",""],["write_parent","Picky::Interfaces::LiveParameters","classes/Picky/Interfaces/LiveParameters.html#method-i-write_parent","(configuration_hash)","<p>Write the parent.\n<p>Note: The ;;; is the end marker for the message.\n"],["Makefile","","files/lib/picky/ext/ruby19/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don’t work. V = 0 Q1 = $(V:1=) Q =\n$(Q1:0=@) n=$( …\n"]]}}